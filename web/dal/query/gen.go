// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	City           *city
	CityAirQuality *cityAirQuality
	CityPersonNum  *cityPersonNum
	Event          *event
	Problem        *problem
	Source         *source
	User           *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	City = &Q.City
	CityAirQuality = &Q.CityAirQuality
	CityPersonNum = &Q.CityPersonNum
	Event = &Q.Event
	Problem = &Q.Problem
	Source = &Q.Source
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		City:           newCity(db, opts...),
		CityAirQuality: newCityAirQuality(db, opts...),
		CityPersonNum:  newCityPersonNum(db, opts...),
		Event:          newEvent(db, opts...),
		Problem:        newProblem(db, opts...),
		Source:         newSource(db, opts...),
		User:           newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	City           city
	CityAirQuality cityAirQuality
	CityPersonNum  cityPersonNum
	Event          event
	Problem        problem
	Source         source
	User           user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		City:           q.City.clone(db),
		CityAirQuality: q.CityAirQuality.clone(db),
		CityPersonNum:  q.CityPersonNum.clone(db),
		Event:          q.Event.clone(db),
		Problem:        q.Problem.clone(db),
		Source:         q.Source.clone(db),
		User:           q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		City:           q.City.replaceDB(db),
		CityAirQuality: q.CityAirQuality.replaceDB(db),
		CityPersonNum:  q.CityPersonNum.replaceDB(db),
		Event:          q.Event.replaceDB(db),
		Problem:        q.Problem.replaceDB(db),
		Source:         q.Source.replaceDB(db),
		User:           q.User.replaceDB(db),
	}
}

type queryCtx struct {
	City           ICityDo
	CityAirQuality ICityAirQualityDo
	CityPersonNum  ICityPersonNumDo
	Event          IEventDo
	Problem        IProblemDo
	Source         ISourceDo
	User           IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		City:           q.City.WithContext(ctx),
		CityAirQuality: q.CityAirQuality.WithContext(ctx),
		CityPersonNum:  q.CityPersonNum.WithContext(ctx),
		Event:          q.Event.WithContext(ctx),
		Problem:        q.Problem.WithContext(ctx),
		Source:         q.Source.WithContext(ctx),
		User:           q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
