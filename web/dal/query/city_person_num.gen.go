// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/whywehere/smart-city-backend/web/dal/model"
)

func newCityPersonNum(db *gorm.DB, opts ...gen.DOOption) cityPersonNum {
	_cityPersonNum := cityPersonNum{}

	_cityPersonNum.cityPersonNumDo.UseDB(db, opts...)
	_cityPersonNum.cityPersonNumDo.UseModel(&model.CityPersonNum{})

	tableName := _cityPersonNum.cityPersonNumDo.TableName()
	_cityPersonNum.ALL = field.NewAsterisk(tableName)
	_cityPersonNum.ID = field.NewInt32(tableName, "id")
	_cityPersonNum.Year = field.NewInt32(tableName, "year")
	_cityPersonNum.Num = field.NewFloat32(tableName, "num")
	_cityPersonNum.Percenteges = field.NewFloat32(tableName, "percenteges")

	_cityPersonNum.fillFieldMap()

	return _cityPersonNum
}

type cityPersonNum struct {
	cityPersonNumDo cityPersonNumDo

	ALL         field.Asterisk
	ID          field.Int32
	Year        field.Int32
	Num         field.Float32
	Percenteges field.Float32

	fieldMap map[string]field.Expr
}

func (c cityPersonNum) Table(newTableName string) *cityPersonNum {
	c.cityPersonNumDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cityPersonNum) As(alias string) *cityPersonNum {
	c.cityPersonNumDo.DO = *(c.cityPersonNumDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cityPersonNum) updateTableName(table string) *cityPersonNum {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Year = field.NewInt32(table, "year")
	c.Num = field.NewFloat32(table, "num")
	c.Percenteges = field.NewFloat32(table, "percenteges")

	c.fillFieldMap()

	return c
}

func (c *cityPersonNum) WithContext(ctx context.Context) ICityPersonNumDo {
	return c.cityPersonNumDo.WithContext(ctx)
}

func (c cityPersonNum) TableName() string { return c.cityPersonNumDo.TableName() }

func (c cityPersonNum) Alias() string { return c.cityPersonNumDo.Alias() }

func (c cityPersonNum) Columns(cols ...field.Expr) gen.Columns {
	return c.cityPersonNumDo.Columns(cols...)
}

func (c *cityPersonNum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cityPersonNum) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["year"] = c.Year
	c.fieldMap["num"] = c.Num
	c.fieldMap["percenteges"] = c.Percenteges
}

func (c cityPersonNum) clone(db *gorm.DB) cityPersonNum {
	c.cityPersonNumDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cityPersonNum) replaceDB(db *gorm.DB) cityPersonNum {
	c.cityPersonNumDo.ReplaceDB(db)
	return c
}

type cityPersonNumDo struct{ gen.DO }

type ICityPersonNumDo interface {
	gen.SubQuery
	Debug() ICityPersonNumDo
	WithContext(ctx context.Context) ICityPersonNumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICityPersonNumDo
	WriteDB() ICityPersonNumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICityPersonNumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICityPersonNumDo
	Not(conds ...gen.Condition) ICityPersonNumDo
	Or(conds ...gen.Condition) ICityPersonNumDo
	Select(conds ...field.Expr) ICityPersonNumDo
	Where(conds ...gen.Condition) ICityPersonNumDo
	Order(conds ...field.Expr) ICityPersonNumDo
	Distinct(cols ...field.Expr) ICityPersonNumDo
	Omit(cols ...field.Expr) ICityPersonNumDo
	Join(table schema.Tabler, on ...field.Expr) ICityPersonNumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICityPersonNumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICityPersonNumDo
	Group(cols ...field.Expr) ICityPersonNumDo
	Having(conds ...gen.Condition) ICityPersonNumDo
	Limit(limit int) ICityPersonNumDo
	Offset(offset int) ICityPersonNumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICityPersonNumDo
	Unscoped() ICityPersonNumDo
	Create(values ...*model.CityPersonNum) error
	CreateInBatches(values []*model.CityPersonNum, batchSize int) error
	Save(values ...*model.CityPersonNum) error
	First() (*model.CityPersonNum, error)
	Take() (*model.CityPersonNum, error)
	Last() (*model.CityPersonNum, error)
	Find() ([]*model.CityPersonNum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CityPersonNum, err error)
	FindInBatches(result *[]*model.CityPersonNum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CityPersonNum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICityPersonNumDo
	Assign(attrs ...field.AssignExpr) ICityPersonNumDo
	Joins(fields ...field.RelationField) ICityPersonNumDo
	Preload(fields ...field.RelationField) ICityPersonNumDo
	FirstOrInit() (*model.CityPersonNum, error)
	FirstOrCreate() (*model.CityPersonNum, error)
	FindByPage(offset int, limit int) (result []*model.CityPersonNum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICityPersonNumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cityPersonNumDo) Debug() ICityPersonNumDo {
	return c.withDO(c.DO.Debug())
}

func (c cityPersonNumDo) WithContext(ctx context.Context) ICityPersonNumDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cityPersonNumDo) ReadDB() ICityPersonNumDo {
	return c.Clauses(dbresolver.Read)
}

func (c cityPersonNumDo) WriteDB() ICityPersonNumDo {
	return c.Clauses(dbresolver.Write)
}

func (c cityPersonNumDo) Session(config *gorm.Session) ICityPersonNumDo {
	return c.withDO(c.DO.Session(config))
}

func (c cityPersonNumDo) Clauses(conds ...clause.Expression) ICityPersonNumDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cityPersonNumDo) Returning(value interface{}, columns ...string) ICityPersonNumDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cityPersonNumDo) Not(conds ...gen.Condition) ICityPersonNumDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cityPersonNumDo) Or(conds ...gen.Condition) ICityPersonNumDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cityPersonNumDo) Select(conds ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cityPersonNumDo) Where(conds ...gen.Condition) ICityPersonNumDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cityPersonNumDo) Order(conds ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cityPersonNumDo) Distinct(cols ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cityPersonNumDo) Omit(cols ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cityPersonNumDo) Join(table schema.Tabler, on ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cityPersonNumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cityPersonNumDo) RightJoin(table schema.Tabler, on ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cityPersonNumDo) Group(cols ...field.Expr) ICityPersonNumDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cityPersonNumDo) Having(conds ...gen.Condition) ICityPersonNumDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cityPersonNumDo) Limit(limit int) ICityPersonNumDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cityPersonNumDo) Offset(offset int) ICityPersonNumDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cityPersonNumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICityPersonNumDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cityPersonNumDo) Unscoped() ICityPersonNumDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cityPersonNumDo) Create(values ...*model.CityPersonNum) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cityPersonNumDo) CreateInBatches(values []*model.CityPersonNum, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cityPersonNumDo) Save(values ...*model.CityPersonNum) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cityPersonNumDo) First() (*model.CityPersonNum, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CityPersonNum), nil
	}
}

func (c cityPersonNumDo) Take() (*model.CityPersonNum, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CityPersonNum), nil
	}
}

func (c cityPersonNumDo) Last() (*model.CityPersonNum, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CityPersonNum), nil
	}
}

func (c cityPersonNumDo) Find() ([]*model.CityPersonNum, error) {
	result, err := c.DO.Find()
	return result.([]*model.CityPersonNum), err
}

func (c cityPersonNumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CityPersonNum, err error) {
	buf := make([]*model.CityPersonNum, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cityPersonNumDo) FindInBatches(result *[]*model.CityPersonNum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cityPersonNumDo) Attrs(attrs ...field.AssignExpr) ICityPersonNumDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cityPersonNumDo) Assign(attrs ...field.AssignExpr) ICityPersonNumDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cityPersonNumDo) Joins(fields ...field.RelationField) ICityPersonNumDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cityPersonNumDo) Preload(fields ...field.RelationField) ICityPersonNumDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cityPersonNumDo) FirstOrInit() (*model.CityPersonNum, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CityPersonNum), nil
	}
}

func (c cityPersonNumDo) FirstOrCreate() (*model.CityPersonNum, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CityPersonNum), nil
	}
}

func (c cityPersonNumDo) FindByPage(offset int, limit int) (result []*model.CityPersonNum, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cityPersonNumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cityPersonNumDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cityPersonNumDo) Delete(models ...*model.CityPersonNum) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cityPersonNumDo) withDO(do gen.Dao) *cityPersonNumDo {
	c.DO = *do.(*gen.DO)
	return c
}
