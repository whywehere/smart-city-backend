// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/whywehere/smart-city-backend/web/dal/model"
)

func newSource(db *gorm.DB, opts ...gen.DOOption) source {
	_source := source{}

	_source.sourceDo.UseDB(db, opts...)
	_source.sourceDo.UseModel(&model.Source{})

	tableName := _source.sourceDo.TableName()
	_source.ALL = field.NewAsterisk(tableName)
	_source.ID = field.NewInt32(tableName, "id")
	_source.Type = field.NewInt32(tableName, "type")
	_source.Num = field.NewFloat32(tableName, "num")

	_source.fillFieldMap()

	return _source
}

type source struct {
	sourceDo sourceDo

	ALL  field.Asterisk
	ID   field.Int32
	Type field.Int32
	Num  field.Float32

	fieldMap map[string]field.Expr
}

func (s source) Table(newTableName string) *source {
	s.sourceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s source) As(alias string) *source {
	s.sourceDo.DO = *(s.sourceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *source) updateTableName(table string) *source {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Type = field.NewInt32(table, "type")
	s.Num = field.NewFloat32(table, "num")

	s.fillFieldMap()

	return s
}

func (s *source) WithContext(ctx context.Context) ISourceDo { return s.sourceDo.WithContext(ctx) }

func (s source) TableName() string { return s.sourceDo.TableName() }

func (s source) Alias() string { return s.sourceDo.Alias() }

func (s source) Columns(cols ...field.Expr) gen.Columns { return s.sourceDo.Columns(cols...) }

func (s *source) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *source) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["type"] = s.Type
	s.fieldMap["num"] = s.Num
}

func (s source) clone(db *gorm.DB) source {
	s.sourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s source) replaceDB(db *gorm.DB) source {
	s.sourceDo.ReplaceDB(db)
	return s
}

type sourceDo struct{ gen.DO }

type ISourceDo interface {
	gen.SubQuery
	Debug() ISourceDo
	WithContext(ctx context.Context) ISourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISourceDo
	WriteDB() ISourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISourceDo
	Not(conds ...gen.Condition) ISourceDo
	Or(conds ...gen.Condition) ISourceDo
	Select(conds ...field.Expr) ISourceDo
	Where(conds ...gen.Condition) ISourceDo
	Order(conds ...field.Expr) ISourceDo
	Distinct(cols ...field.Expr) ISourceDo
	Omit(cols ...field.Expr) ISourceDo
	Join(table schema.Tabler, on ...field.Expr) ISourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISourceDo
	Group(cols ...field.Expr) ISourceDo
	Having(conds ...gen.Condition) ISourceDo
	Limit(limit int) ISourceDo
	Offset(offset int) ISourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISourceDo
	Unscoped() ISourceDo
	Create(values ...*model.Source) error
	CreateInBatches(values []*model.Source, batchSize int) error
	Save(values ...*model.Source) error
	First() (*model.Source, error)
	Take() (*model.Source, error)
	Last() (*model.Source, error)
	Find() ([]*model.Source, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Source, err error)
	FindInBatches(result *[]*model.Source, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Source) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISourceDo
	Assign(attrs ...field.AssignExpr) ISourceDo
	Joins(fields ...field.RelationField) ISourceDo
	Preload(fields ...field.RelationField) ISourceDo
	FirstOrInit() (*model.Source, error)
	FirstOrCreate() (*model.Source, error)
	FindByPage(offset int, limit int) (result []*model.Source, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sourceDo) Debug() ISourceDo {
	return s.withDO(s.DO.Debug())
}

func (s sourceDo) WithContext(ctx context.Context) ISourceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sourceDo) ReadDB() ISourceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sourceDo) WriteDB() ISourceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sourceDo) Session(config *gorm.Session) ISourceDo {
	return s.withDO(s.DO.Session(config))
}

func (s sourceDo) Clauses(conds ...clause.Expression) ISourceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sourceDo) Returning(value interface{}, columns ...string) ISourceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sourceDo) Not(conds ...gen.Condition) ISourceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sourceDo) Or(conds ...gen.Condition) ISourceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sourceDo) Select(conds ...field.Expr) ISourceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sourceDo) Where(conds ...gen.Condition) ISourceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sourceDo) Order(conds ...field.Expr) ISourceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sourceDo) Distinct(cols ...field.Expr) ISourceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sourceDo) Omit(cols ...field.Expr) ISourceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sourceDo) Join(table schema.Tabler, on ...field.Expr) ISourceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISourceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sourceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISourceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sourceDo) Group(cols ...field.Expr) ISourceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sourceDo) Having(conds ...gen.Condition) ISourceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sourceDo) Limit(limit int) ISourceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sourceDo) Offset(offset int) ISourceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISourceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sourceDo) Unscoped() ISourceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sourceDo) Create(values ...*model.Source) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sourceDo) CreateInBatches(values []*model.Source, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sourceDo) Save(values ...*model.Source) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sourceDo) First() (*model.Source, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Source), nil
	}
}

func (s sourceDo) Take() (*model.Source, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Source), nil
	}
}

func (s sourceDo) Last() (*model.Source, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Source), nil
	}
}

func (s sourceDo) Find() ([]*model.Source, error) {
	result, err := s.DO.Find()
	return result.([]*model.Source), err
}

func (s sourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Source, err error) {
	buf := make([]*model.Source, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sourceDo) FindInBatches(result *[]*model.Source, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sourceDo) Attrs(attrs ...field.AssignExpr) ISourceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sourceDo) Assign(attrs ...field.AssignExpr) ISourceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sourceDo) Joins(fields ...field.RelationField) ISourceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sourceDo) Preload(fields ...field.RelationField) ISourceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sourceDo) FirstOrInit() (*model.Source, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Source), nil
	}
}

func (s sourceDo) FirstOrCreate() (*model.Source, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Source), nil
	}
}

func (s sourceDo) FindByPage(offset int, limit int) (result []*model.Source, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sourceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sourceDo) Delete(models ...*model.Source) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sourceDo) withDO(do gen.Dao) *sourceDo {
	s.DO = *do.(*gen.DO)
	return s
}
